#include <iostream>
#include "Pair.h"
#include "Fraction.h"
#include "Vector.h"
#include "object.h"
using namespace std;

void main()
{
	Vector v(5);//вектор из 5 элементов
	Pair a;//объект класса Car
	cin >> a;
	Fraction b;// объект класса Lorry
	cin >> b;
	Object* p = &a;//ставим указатель на объект класса Car
	v.Add(p);//добавляем объект в вектор
	p = &b;//ставим указатель на объект класса Lorry
	v.Add(p); //добавляем объект в вектор
	cout << v;//вывод вектора

}

//1. Чисто виртуальный метод это метод содержащий признак = 0 вместо тела. Отличается от виртуального тем что при наследовании необходимо переопределять этот метод.
//2. Класс называется абстрактным если содержит хотя бы 1 чисто виртуальный метод
//3. Абстрактные классы предназначены для представления общих понятий, которые предполагается конкретизировать в производных классах. 
//4. Это функцию, параметром которой является указатель на абстрактный класс.
//5. Возможностью работать с объектом любого типа в пределах одной иерархии
//6. Привести примеры иерархий с использованием абстрактных классов:
// Абстрактный класс 4-х угольник
// класс выпуклый:4-х угольник
// класс трапеция:выпуклый
// класс параллелограмм:трапеция
// Абстрактный класс животные
// класс собака:животные
// класс кошка:животные
// класс птица:животные
//7. Привести примеры полиморфных функций:
// void Vector::Add(Object *p)
//{
//	if (cur < size)
//	{
//		beg[cur] = p;
//		cur++;
//	}
//}
// 
//8. Когда мы не можем заранее определить от какого класса из иерархии будет вызвана функция